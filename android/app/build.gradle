apply plugin: "com.android.application"
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

project.ext.envConfigFiles = [
   production: ".env.production",
   staging: ".env.staging",
   development: ".env.development"
]
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

/**
 * This is the configuration block to customize your React Native Android app.
 */
react {
      autolinkLibrariesWithApp()
}

def enableProguardInReleaseBuilds = false
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    flavorDimensions "default"
    productFlavors {
        production {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId "com.infodebit"
            targetSdkVersion rootProject.ext.targetSdkVersion
            resValue "string", "app_name", "MyInfodebit"
        }
        staging {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId "com.infodebit.staging"
            targetSdkVersion rootProject.ext.targetSdkVersion
            resValue "string", "app_name", "MyInfodebit Staging"
        }
        development {
            minSdkVersion rootProject.ext.minSdkVersion
            applicationId "com.infodebit.development"
            targetSdkVersion rootProject.ext.targetSdkVersion
            resValue "string", "app_name", "MyInfodebit Dev"
        }
    }

    namespace "com.infodebit"
    defaultConfig {
        missingDimensionStrategy 'react-native-camera', 'general'
        applicationId "com.infodebit"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 40
        versionName "1.20"
        resValue "string", "build_config_package", "com.infodebit"
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            matchingFallbacks = ['debug', 'release']
        }
        release {
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"

            firebaseCrashlytics {
                nativeSymbolUploadEnabled true
                unstrippedNativeLibsDir 'build/intermediates/merged_native_libs/release/out/lib'
            }
        }
    }

    sourceSets {
        production {
            res.srcDirs += 'src/production/res'
        }
        staging {
            res.srcDirs += 'src/staging/res'
        }
        development {
            res.srcDirs += 'src/development/res'
        }
    }
}

dependencies {
    implementation("com.facebook.react:react-android")
    implementation platform('com.google.firebase:firebase-bom:32.2.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics'

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply plugin: 'com.google.gms.google-services'

googleServices {
    disableVersionCheck = true
}

task copyGoogleServicesFile {
    doLast {
        def env = project.getGradle().getStartParameter().getTaskRequests().toString()
        def flavor = env.contains("production") ? "production" :
                     env.contains("staging") ? "staging" : "development"
        copy {
            from "src/${flavor}/google-services.json"
            into "."
            rename { "google-services.json" }
        }
    }
}

preBuild.dependsOn copyGoogleServicesFile
